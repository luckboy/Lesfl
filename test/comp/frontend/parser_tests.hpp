/****************************************************************************
 *   Copyright (C) 2021 ≈Åukasz Szpakowski.                                  *
 *                                                                          *
 *   This software is licensed under the GNU Lesser General Public          *
 *   License v3 or later. See the LICENSE file and the GPL file for         *
 *   the full licensing terms.                                              *
 ****************************************************************************/
#ifndef _FRONTEND_PARSER_TESTS_HPP
#define _FRONTEND_PARSER_TESTS_HPP

#include <cppunit/TestFixture.h>
#include <cppunit/extensions/HelperMacros.h>
#include <cppunit/TestAssert.h>
#include <lesfl/frontend.hpp>

namespace lesfl
{
  namespace frontend
  {
    namespace test
    {
      class ParserTests : public CppUnit::TestFixture
      {
        CPPUNIT_TEST_SUITE(ParserTests);
        CPPUNIT_TEST(test_parser_parses_simple_definitions);
        CPPUNIT_TEST(test_parser_parses_definitions_with_comments);
        CPPUNIT_TEST(test_parser_parses_definition_with_nested_comment);
        CPPUNIT_TEST(test_parser_parses_definitions_which_are_separated_semicolon);
        CPPUNIT_TEST(test_parser_parses_expression_without_space_separations);
        CPPUNIT_TEST(test_parser_parses_definition_with_newline_after_keyword);
        CPPUNIT_TEST(test_parser_parses_expression_with_newline_after_symbol);
        CPPUNIT_TEST(test_parser_parses_expression_with_newlines_in_parenthesis);
        CPPUNIT_TEST(test_parser_parses_qualified_identifiers);
        CPPUNIT_TEST(test_parser_parses_characters);
        CPPUNIT_TEST(test_parser_parses_wide_characters);
        CPPUNIT_TEST(test_parser_parses_integer_numbers);
        CPPUNIT_TEST(test_parser_parses_negative_integer_numbers_in_values);
        CPPUNIT_TEST(test_parser_parses_floating_point_numbers);
        CPPUNIT_TEST(test_parser_parses_infinities);
        CPPUNIT_TEST(test_parser_parses_nans);
        CPPUNIT_TEST(test_parser_parses_negative_floating_point_numbers_in_values);
        CPPUNIT_TEST(test_parser_parses_negative_infinities_in_values);
        CPPUNIT_TEST(test_parser_parses_strings);
        CPPUNIT_TEST(test_parser_parses_wide_strings);
        CPPUNIT_TEST(test_parser_parses_imports);
        CPPUNIT_TEST(test_parser_parses_module_definitions);
        CPPUNIT_TEST(test_parser_parses_user_defined_variable_definition);
        CPPUNIT_TEST(test_parser_parses_user_defined_variable_definition_with_modifier_and_type);
        CPPUNIT_TEST(test_parser_parses_external_variable_definition);
        CPPUNIT_TEST(test_parser_parses_external_variable_definition_with_modifier);
        CPPUNIT_TEST(test_parser_parses_alias_variable_definition);
        CPPUNIT_TEST(test_parser_parses_alias_variable_definition_with_modifier_and_type);
        CPPUNIT_TEST(test_parser_parses_user_defined_variable_template_definition);
        CPPUNIT_TEST(test_parser_parses_user_defined_variable_template_definition_with_modifier_and_type_and_instance_type_parameters);
        CPPUNIT_TEST(test_parser_parses_user_defined_variable_template_definition_without_value);
        CPPUNIT_TEST(test_parser_parses_user_defined_variable_template_definition_without_value_with_modifier_and_instance_type_parameters);
        CPPUNIT_TEST(test_parser_parses_alias_variable_template_definition);
        CPPUNIT_TEST(test_parser_parses_alias_variable_template_definition_with_modifier_and_type_and_instance_type_parameters);
        CPPUNIT_TEST(test_parser_parses_user_defined_variable_instance_definition);
        CPPUNIT_TEST(test_parser_parses_user_defined_variable_instance_definition_with_type);
        CPPUNIT_TEST(test_parser_parses_external_variable_instance_definition);
        CPPUNIT_TEST(test_parser_parses_user_defined_variable_instance_template_definition);
        CPPUNIT_TEST(test_parser_parses_user_defined_variable_instance_template_definition_with_type);
        CPPUNIT_TEST(test_parser_parses_user_defined_function_definition);
        CPPUNIT_TEST(test_parser_parses_user_defined_function_definition_with_annotations_and_modifiers_and_types);
        CPPUNIT_TEST(test_parser_parses_external_function_definition);
        CPPUNIT_TEST(test_parser_parses_external_function_definition_with_modifiers);
        CPPUNIT_TEST(test_parser_parses_native_function_definition);
        CPPUNIT_TEST(test_parser_parses_native_function_definition_with_annotations_and_modifiers);
        CPPUNIT_TEST(test_parser_parses_user_defined_function_template_definition);
        CPPUNIT_TEST(test_parser_parses_user_defined_function_template_definition_with_annotations_and_modifiers_and_types_and_instance_type_parameters);
        CPPUNIT_TEST(test_parser_parses_user_defined_function_template_definition_without_body);
        CPPUNIT_TEST(test_parser_parses_user_defined_function_template_definition_without_body_with_modifiers_and_instance_type_parameters);
        CPPUNIT_TEST(test_parser_parses_user_defined_function_instance_definition);
        CPPUNIT_TEST(test_parser_parses_user_defined_function_instance_definition_with_annotations_and_modifiers_and_types);
        CPPUNIT_TEST(test_parser_parses_external_function_instance_definition);
        CPPUNIT_TEST(test_parser_parses_external_function_instance_definition_with_modifiers);
        CPPUNIT_TEST(test_parser_parses_native_function_instance_definition);
        CPPUNIT_TEST(test_parser_parses_native_function_instance_definition_with_annotations_and_modifiers);
        CPPUNIT_TEST(test_parser_parses_user_defined_function_instance_template_definition);
        CPPUNIT_TEST(test_parser_parses_user_defined_function_instance_template_definition_with_annotations_and_modifiers_and_types);
        CPPUNIT_TEST(test_parser_parses_type_synonym_variable_definition);
        CPPUNIT_TEST(test_parser_parses_type_synonym_variable_definition_with_modifier);
        CPPUNIT_TEST(test_parser_parses_datatype_variable_definition);
        CPPUNIT_TEST(test_parser_parses_datatype_variable_definition_with_modifier);
        CPPUNIT_TEST(test_parser_parses_unique_datatype_variable_definition);
        CPPUNIT_TEST(test_parser_parses_unique_datatype_variable_definition_with_modifier);
        CPPUNIT_TEST(test_parser_parses_datatype_variable_definition_without_constructors);
        CPPUNIT_TEST(test_parser_parses_datatype_variable_definition_without_constructors_with_modifier);
        CPPUNIT_TEST(test_parser_parses_unique_datatype_variable_definition_without_constructors);
        CPPUNIT_TEST(test_parser_parses_unique_datatype_variable_definition_without_constructors_with_modifier);
        CPPUNIT_TEST(test_parser_parses_type_synonym_function_definition);
        CPPUNIT_TEST(test_parser_parses_type_synonym_function_definition_with_modifier_and_instance_type_parameters);
        CPPUNIT_TEST(test_parser_parses_type_synonym_function_definition_without_body);
        CPPUNIT_TEST(test_parser_parses_type_synonym_function_definition_without_body_with_modifier_and_instance_type_parameters);
        CPPUNIT_TEST(test_parser_parses_datatype_function_definition);
        CPPUNIT_TEST(test_parser_parses_datatype_function_definition_with_modifier_and_instance_type_parameters);
        CPPUNIT_TEST(test_parser_parses_unique_datatype_function_definition);
        CPPUNIT_TEST(test_parser_parses_unique_datatype_function_definition_with_modifier_and_instance_type_parameters);
        CPPUNIT_TEST(test_parser_parses_datatype_function_definition_without_constructors);
        CPPUNIT_TEST(test_parser_parses_datatype_function_definition_without_constructors_with_modifier_and_instance_type_parameters);
        CPPUNIT_TEST(test_parser_parses_unique_datatype_function_definition_without_constructors);
        CPPUNIT_TEST(test_parser_parses_unique_datatype_function_definition_without_constructors_with_modifier_and_instance_type_parameters);
        CPPUNIT_TEST(test_parser_parses_type_synonym_instance_definition);
        CPPUNIT_TEST(test_parser_parses_datatype_instance_definition);
        CPPUNIT_TEST(test_parser_parses_unique_datatype_instance_definition);
        CPPUNIT_TEST(test_parser_parses_datatype_instance_definition_without_constructors);
        CPPUNIT_TEST(test_parser_parses_unique_datatype_instance_definition_without_constructors);
        CPPUNIT_TEST(test_parser_parses_type_synonym_instance_template_definition);
        CPPUNIT_TEST(test_parser_parses_datatype_instance_template_definition);
        CPPUNIT_TEST(test_parser_parses_unique_datatype_instance_template_definition);
        CPPUNIT_TEST(test_parser_parses_datatype_instance_template_definition_without_constructors);
        CPPUNIT_TEST(test_parser_parses_unique_datatype_instance_template_definition_without_constructors);
        CPPUNIT_TEST(test_parser_parses_arguments_without_types);
        CPPUNIT_TEST(test_parser_parses_arguments_with_types);
        CPPUNIT_TEST(test_parser_parses_typed_arguments);
        CPPUNIT_TEST(test_parser_parses_arguments_without_types_for_binary_operator);
        CPPUNIT_TEST(test_parser_parses_arguments_with_types_for_binary_operator);
        CPPUNIT_TEST(test_parser_parses_typed_arguments_for_binary_operator);
        CPPUNIT_TEST(test_parser_parses_argument_without_type_for_unary_operator);
        CPPUNIT_TEST(test_parser_parses_argument_with_type_for_unary_operator);
        CPPUNIT_TEST(test_parser_parses_typed_argument_for_unary_operator);
        CPPUNIT_TEST(test_parser_parses_annotations);
        CPPUNIT_TEST(test_parser_parses_if_expression);
        CPPUNIT_TEST(test_parser_parses_if_expression_with_nested_if_expressions);
        CPPUNIT_TEST(test_parser_parses_let_expression);
        CPPUNIT_TEST(test_parser_parses_let_expression_with_nested_let_expressions);
        CPPUNIT_TEST(test_parser_parses_match_expression);
        CPPUNIT_TEST(test_parser_parses_match_expression_with_nested_match_expression);
        CPPUNIT_TEST(test_parser_parses_throw_expression);
        CPPUNIT_TEST(test_parser_parses_typed_expression);
        CPPUNIT_TEST(test_parser_parses_typed_expression_with_nested_expression);
        CPPUNIT_TEST(test_parser_parses_cons_expression);
        CPPUNIT_TEST(test_parser_parses_cons_expression_with_nested_expressions);
        CPPUNIT_TEST(test_parser_parses_expression);
        CPPUNIT_TEST(test_parser_parses_expression_with_nested_expressions);
        CPPUNIT_TEST(test_parser_parses_expression_with_nested_unary_operator_expressions);
        CPPUNIT_TEST(test_parser_parses_unary_operator_expression);
        CPPUNIT_TEST(test_parser_parses_unary_operator_expression_with_nested_unary_operator_expression);
        CPPUNIT_TEST(test_parser_parses_field_expression);
        CPPUNIT_TEST(test_parser_parses_unique_field_expression);
        CPPUNIT_TEST(test_parser_parses_set_unique_field_expression);
        CPPUNIT_TEST(test_parser_parses_named_field_expression);
        CPPUNIT_TEST(test_parser_parses_unique_named_field_expression);
        CPPUNIT_TEST(test_parser_parses_set_unique_named_field_expression);
        CPPUNIT_TEST(test_parser_parses_applications);
        CPPUNIT_TEST(test_parser_parses_primitive_applications);
        CPPUNIT_TEST(test_parser_parses_unique_applications);
        CPPUNIT_TEST(test_parser_parses_builtin_applications);
        CPPUNIT_TEST(test_parser_parses_literal);
        CPPUNIT_TEST(test_parser_parses_variable_expression);
        CPPUNIT_TEST(test_parser_parses_lists);
        CPPUNIT_TEST(test_parser_parses_arrays);
        CPPUNIT_TEST(test_parser_parses_unique_arrays);
        CPPUNIT_TEST(test_parser_parses_tuples);
        CPPUNIT_TEST(test_parser_parses_unique_tuples);
        CPPUNIT_TEST(test_parser_parses_named_field_constructor_applications);
        CPPUNIT_TEST(test_parser_parses_expressions_in_parentheses);
        CPPUNIT_TEST(test_parser_parses_bindings);
        CPPUNIT_TEST(test_parser_parses_variable_binding);
        CPPUNIT_TEST(test_parser_parses_tuple_binding);
        CPPUNIT_TEST(test_parser_parses_tuple_binding_with_wildcard);
        CPPUNIT_TEST(test_parser_parses_tuple_binding_with_one_variable);
        CPPUNIT_TEST(test_parser_parses_cases);
        CPPUNIT_TEST(test_parser_parses_typed_pattern);
        CPPUNIT_TEST(test_parser_parses_typed_pattern_with_nested_pattern);
        CPPUNIT_TEST(test_parser_parses_pattern);
        CPPUNIT_TEST(test_parser_parses_variable_constructor_pattern);
        CPPUNIT_TEST(test_parser_parses_function_constructor_patterns);
        CPPUNIT_TEST(test_parser_parses_named_field_constructor_patterns);
        CPPUNIT_TEST(test_parser_parses_list_patterns);
        CPPUNIT_TEST(test_parser_parses_array_patterns);
        CPPUNIT_TEST(test_parser_parses_unique_array_patterns);
        CPPUNIT_TEST(test_parser_parses_tuple_patterns);
        CPPUNIT_TEST(test_parser_parses_unique_tuple_patterns);
        CPPUNIT_TEST(test_parser_parses_literal_pattern);
        CPPUNIT_TEST(test_parser_parses_negative_literal_pattern);
        CPPUNIT_TEST(test_parser_parses_variable_pattern);
        CPPUNIT_TEST(test_parser_parses_as_pattern);
        CPPUNIT_TEST(test_parser_parses_wildcard_pattern);
        CPPUNIT_TEST(test_parser_parses_patterns_in_parentheses);
        CPPUNIT_TEST(test_parser_parses_typed_value);
        CPPUNIT_TEST(test_parser_parses_typed_value_with_nested_value);
        CPPUNIT_TEST(test_parser_parses_value);
        CPPUNIT_TEST(test_parser_parses_variable_literal_value);
        CPPUNIT_TEST(test_parser_parses_negative_variable_literal_value);
        CPPUNIT_TEST(test_parser_parses_list_values);
        CPPUNIT_TEST(test_parser_parses_array_values);
        CPPUNIT_TEST(test_parser_parses_tuple_values);
        CPPUNIT_TEST(test_parser_parses_variable_constructor_value);
        CPPUNIT_TEST(test_parser_parses_function_constructor_values);
        CPPUNIT_TEST(test_parser_parses_named_field_constructor_values);
        CPPUNIT_TEST(test_parser_parses_values_in_parentheses);
        CPPUNIT_TEST(test_parser_parses_fields_with_newlines_in_brace);
        CPPUNIT_TEST(test_parser_parses_lambda_value);
        CPPUNIT_TEST(test_parser_parses_lambda_value_with_modifiers_and_types);
        CPPUNIT_TEST(test_parser_parses_unique_lambda_value);
        CPPUNIT_TEST(test_parser_parses_unique_lambda_value_with_modifier_and_types);
        CPPUNIT_TEST(test_parser_parses_lambda_value_for_value);
        CPPUNIT_TEST(test_parser_parses_lambda_value_with_modifiers_and_types_for_value);
        CPPUNIT_TEST(test_parser_parses_constructors);
        CPPUNIT_TEST(test_parser_parses_named_field_constructors);
        CPPUNIT_TEST(test_parser_parses_function_constructors_for_unique_datatype);
        CPPUNIT_TEST(test_parser_parses_named_field_constructors_for_unique_datatype);
        CPPUNIT_TEST(test_parser_parses_variable_constructor);
        CPPUNIT_TEST(test_parser_parses_variable_constructor_with_modifier);
        CPPUNIT_TEST(test_parser_parses_function_constructor);
        CPPUNIT_TEST(test_parser_parses_function_constructor_with_annotations_and_modifiers);
        CPPUNIT_TEST(test_parser_parses_named_field_constructor);
        CPPUNIT_TEST(test_parser_parses_named_field_constructor_with_annotations_and_modifiers);
        CPPUNIT_TEST(test_parser_parses_binary_operator_constructor);
        CPPUNIT_TEST(test_parser_parses_binary_operator_constructor_with_annotations_and_modifiers);
        CPPUNIT_TEST(test_parser_parses_with_type_expression);
        CPPUNIT_TEST(test_parser_parses_with_type_expression_with_nested_type_expression);
        CPPUNIT_TEST(test_parser_parses_function_types);
        CPPUNIT_TEST(test_parser_parses_primitive_function_types);
        CPPUNIT_TEST(test_parser_parses_unique_function_types);
        CPPUNIT_TEST(test_parser_parses_type_variable_expression);
        CPPUNIT_TEST(test_parser_parses_type_parameter_expression);
        CPPUNIT_TEST(test_parser_parses_tuple_types);
        CPPUNIT_TEST(test_parser_parses_unique_tuple_types);
        CPPUNIT_TEST(test_parser_parses_type_applications);
        CPPUNIT_TEST(test_parser_parses_type_expression_in_parenthesis);
        CPPUNIT_TEST(test_parser_parses_semicolons);
        CPPUNIT_TEST(test_parser_parses_semicolons_in_module_definition);
        CPPUNIT_TEST(test_parser_parses_semicolons_in_let_expression);
        CPPUNIT_TEST(test_parser_parses_semicolons_in_match_expression);
        CPPUNIT_TEST(test_parser_complains_on_syntax_error);
        CPPUNIT_TEST(test_parser_complains_on_unclosed_comment);
        CPPUNIT_TEST(test_parser_complains_on_empty_character_literal);
        CPPUNIT_TEST(test_parser_complains_on_unclosed_character_literal);
        CPPUNIT_TEST(test_parser_complains_on_unclosed_character_literal_for_end_of_file);
        CPPUNIT_TEST(test_parser_complains_on_unclosed_character_literal_for_too_many_characters);
        CPPUNIT_TEST(test_parser_complains_on_empty_wide_character_literal);
        CPPUNIT_TEST(test_parser_complains_on_unclosed_wide_character_literal);
        CPPUNIT_TEST(test_parser_complains_on_unclosed_wide_character_literal_for_end_of_file);
        CPPUNIT_TEST(test_parser_complains_on_unclosed_wide_character_literal_for_too_many_characters);
        CPPUNIT_TEST(test_parser_complains_on_integer_number_too_large_for_decimal_system);
        CPPUNIT_TEST(test_parser_complains_on_integer_number_too_large_for_hexdecimal_system);
        CPPUNIT_TEST(test_parser_complains_on_integer_number_too_large_for_octal_system);
        CPPUNIT_TEST(test_parser_complains_on_floating_point_number_too_large);
        CPPUNIT_TEST(test_parser_complains_on_unclosed_string_literal);
        CPPUNIT_TEST(test_parser_complains_on_unclosed_string_literal_for_end_of_file);
        CPPUNIT_TEST(test_parser_complains_on_unclosed_wide_string_literal);
        CPPUNIT_TEST(test_parser_complains_on_unclosed_wide_string_literal_for_end_of_file);
        CPPUNIT_TEST(test_parser_complains_on_incorrect_character);
        CPPUNIT_TEST(test_parser_complains_on_incorrect_built_in_function);
        CPPUNIT_TEST_SUITE_END();

        Parser *_M_parser;
      public:
        void setUp();

        void tearDown();
        
        void test_parser_parses_simple_definitions();
        void test_parser_parses_definitions_with_comments();
        void test_parser_parses_definition_with_nested_comment();
        void test_parser_parses_definitions_which_are_separated_semicolon();
        void test_parser_parses_expression_without_space_separations();
        void test_parser_parses_definition_with_newline_after_keyword();
        void test_parser_parses_expression_with_newline_after_symbol();
        void test_parser_parses_expression_with_newlines_in_parenthesis();
        void test_parser_parses_qualified_identifiers();
        void test_parser_parses_characters();
        void test_parser_parses_wide_characters();
        void test_parser_parses_integer_numbers();
        void test_parser_parses_negative_integer_numbers_in_values();
        void test_parser_parses_floating_point_numbers();
        void test_parser_parses_infinities();
        void test_parser_parses_nans();
        void test_parser_parses_negative_floating_point_numbers_in_values();
        void test_parser_parses_negative_infinities_in_values();
        void test_parser_parses_strings();
        void test_parser_parses_wide_strings();
        void test_parser_parses_imports();
        void test_parser_parses_module_definitions();
        void test_parser_parses_user_defined_variable_definition();
        void test_parser_parses_user_defined_variable_definition_with_modifier_and_type();
        void test_parser_parses_external_variable_definition();
        void test_parser_parses_external_variable_definition_with_modifier();
        void test_parser_parses_alias_variable_definition();
        void test_parser_parses_alias_variable_definition_with_modifier_and_type();
        void test_parser_parses_user_defined_variable_template_definition();
        void test_parser_parses_user_defined_variable_template_definition_with_modifier_and_type_and_instance_type_parameters();
        void test_parser_parses_user_defined_variable_template_definition_without_value();
        void test_parser_parses_user_defined_variable_template_definition_without_value_with_modifier_and_instance_type_parameters();
        void test_parser_parses_alias_variable_template_definition();
        void test_parser_parses_alias_variable_template_definition_with_modifier_and_type_and_instance_type_parameters();
        void test_parser_parses_user_defined_variable_instance_definition();
        void test_parser_parses_user_defined_variable_instance_definition_with_type();
        void test_parser_parses_external_variable_instance_definition();
        void test_parser_parses_user_defined_variable_instance_template_definition();
        void test_parser_parses_user_defined_variable_instance_template_definition_with_type();
        void test_parser_parses_user_defined_function_definition();
        void test_parser_parses_user_defined_function_definition_with_annotations_and_modifiers_and_types();
        void test_parser_parses_external_function_definition();
        void test_parser_parses_external_function_definition_with_modifiers();
        void test_parser_parses_native_function_definition();
        void test_parser_parses_native_function_definition_with_annotations_and_modifiers();
        void test_parser_parses_user_defined_function_template_definition();
        void test_parser_parses_user_defined_function_template_definition_with_annotations_and_modifiers_and_types_and_instance_type_parameters();
        void test_parser_parses_user_defined_function_template_definition_without_body();
        void test_parser_parses_user_defined_function_template_definition_without_body_with_modifiers_and_instance_type_parameters();
        void test_parser_parses_user_defined_function_instance_definition();
        void test_parser_parses_user_defined_function_instance_definition_with_annotations_and_modifiers_and_types();
        void test_parser_parses_external_function_instance_definition();
        void test_parser_parses_external_function_instance_definition_with_modifiers();
        void test_parser_parses_native_function_instance_definition();
        void test_parser_parses_native_function_instance_definition_with_annotations_and_modifiers();
        void test_parser_parses_user_defined_function_instance_template_definition();
        void test_parser_parses_user_defined_function_instance_template_definition_with_annotations_and_modifiers_and_types();
        void test_parser_parses_type_synonym_variable_definition();
        void test_parser_parses_type_synonym_variable_definition_with_modifier();
        void test_parser_parses_datatype_variable_definition();
        void test_parser_parses_datatype_variable_definition_with_modifier();
        void test_parser_parses_unique_datatype_variable_definition();
        void test_parser_parses_unique_datatype_variable_definition_with_modifier();
        void test_parser_parses_datatype_variable_definition_without_constructors();
        void test_parser_parses_datatype_variable_definition_without_constructors_with_modifier();
        void test_parser_parses_unique_datatype_variable_definition_without_constructors();
        void test_parser_parses_unique_datatype_variable_definition_without_constructors_with_modifier();
        void test_parser_parses_type_synonym_function_definition();
        void test_parser_parses_type_synonym_function_definition_with_modifier_and_instance_type_parameters();
        void test_parser_parses_type_synonym_function_definition_without_body();
        void test_parser_parses_type_synonym_function_definition_without_body_with_modifier_and_instance_type_parameters();
        void test_parser_parses_datatype_function_definition();
        void test_parser_parses_datatype_function_definition_with_modifier_and_instance_type_parameters();
        void test_parser_parses_unique_datatype_function_definition();
        void test_parser_parses_unique_datatype_function_definition_with_modifier_and_instance_type_parameters();
        void test_parser_parses_datatype_function_definition_without_constructors();
        void test_parser_parses_datatype_function_definition_without_constructors_with_modifier_and_instance_type_parameters();
        void test_parser_parses_unique_datatype_function_definition_without_constructors();
        void test_parser_parses_unique_datatype_function_definition_without_constructors_with_modifier_and_instance_type_parameters();
        void test_parser_parses_type_synonym_instance_definition();
        void test_parser_parses_datatype_instance_definition();
        void test_parser_parses_unique_datatype_instance_definition();
        void test_parser_parses_datatype_instance_definition_without_constructors();
        void test_parser_parses_unique_datatype_instance_definition_without_constructors();
        void test_parser_parses_type_synonym_instance_template_definition();
        void test_parser_parses_datatype_instance_template_definition();
        void test_parser_parses_unique_datatype_instance_template_definition();
        void test_parser_parses_datatype_instance_template_definition_without_constructors();
        void test_parser_parses_unique_datatype_instance_template_definition_without_constructors();
        void test_parser_parses_arguments_without_types();
        void test_parser_parses_arguments_with_types();
        void test_parser_parses_typed_arguments();
        void test_parser_parses_arguments_without_types_for_binary_operator();
        void test_parser_parses_arguments_with_types_for_binary_operator();
        void test_parser_parses_typed_arguments_for_binary_operator();
        void test_parser_parses_argument_without_type_for_unary_operator();
        void test_parser_parses_argument_with_type_for_unary_operator();
        void test_parser_parses_typed_argument_for_unary_operator();
        void test_parser_parses_annotations();
        void test_parser_parses_if_expression();
        void test_parser_parses_if_expression_with_nested_if_expressions();
        void test_parser_parses_let_expression();
        void test_parser_parses_let_expression_with_nested_let_expressions();
        void test_parser_parses_match_expression();
        void test_parser_parses_match_expression_with_nested_match_expression();
        void test_parser_parses_throw_expression();
        void test_parser_parses_typed_expression();
        void test_parser_parses_typed_expression_with_nested_expression();
        void test_parser_parses_cons_expression();
        void test_parser_parses_cons_expression_with_nested_expressions();
        void test_parser_parses_expression();
        void test_parser_parses_expression_with_nested_expressions();
        void test_parser_parses_expression_with_nested_unary_operator_expressions();
        void test_parser_parses_unary_operator_expression();
        void test_parser_parses_unary_operator_expression_with_nested_unary_operator_expression();
        void test_parser_parses_field_expression();
        void test_parser_parses_unique_field_expression();
        void test_parser_parses_set_unique_field_expression();
        void test_parser_parses_named_field_expression();
        void test_parser_parses_unique_named_field_expression();
        void test_parser_parses_set_unique_named_field_expression();
        void test_parser_parses_applications();
        void test_parser_parses_primitive_applications();
        void test_parser_parses_unique_applications();
        void test_parser_parses_builtin_applications();
        void test_parser_parses_literal();
        void test_parser_parses_variable_expression();
        void test_parser_parses_lists();
        void test_parser_parses_arrays();
        void test_parser_parses_unique_arrays();
        void test_parser_parses_tuples();
        void test_parser_parses_unique_tuples();
        void test_parser_parses_named_field_constructor_applications();
        void test_parser_parses_expressions_in_parentheses();
        void test_parser_parses_bindings();
        void test_parser_parses_variable_binding();
        void test_parser_parses_tuple_binding();
        void test_parser_parses_tuple_binding_with_wildcard();
        void test_parser_parses_tuple_binding_with_one_variable();
        void test_parser_parses_cases();
        void test_parser_parses_typed_pattern();
        void test_parser_parses_typed_pattern_with_nested_pattern();
        void test_parser_parses_pattern();
        void test_parser_parses_variable_constructor_pattern();
        void test_parser_parses_function_constructor_patterns();
        void test_parser_parses_named_field_constructor_patterns();
        void test_parser_parses_list_patterns();
        void test_parser_parses_array_patterns();
        void test_parser_parses_unique_array_patterns();
        void test_parser_parses_tuple_patterns();
        void test_parser_parses_unique_tuple_patterns();
        void test_parser_parses_literal_pattern();
        void test_parser_parses_negative_literal_pattern();
        void test_parser_parses_variable_pattern();
        void test_parser_parses_as_pattern();
        void test_parser_parses_wildcard_pattern();
        void test_parser_parses_patterns_in_parentheses();
        void test_parser_parses_typed_value();
        void test_parser_parses_typed_value_with_nested_value();
        void test_parser_parses_value();
        void test_parser_parses_variable_literal_value();
        void test_parser_parses_negative_variable_literal_value();
        void test_parser_parses_list_values();
        void test_parser_parses_array_values();
        void test_parser_parses_tuple_values();
        void test_parser_parses_variable_constructor_value();
        void test_parser_parses_function_constructor_values();
        void test_parser_parses_named_field_constructor_values();
        void test_parser_parses_values_in_parentheses();
        void test_parser_parses_fields_with_newlines_in_brace();
        void test_parser_parses_lambda_value();
        void test_parser_parses_lambda_value_with_modifiers_and_types();
        void test_parser_parses_unique_lambda_value();
        void test_parser_parses_unique_lambda_value_with_modifier_and_types();
        void test_parser_parses_lambda_value_for_value();
        void test_parser_parses_lambda_value_with_modifiers_and_types_for_value();
        void test_parser_parses_constructors();
        void test_parser_parses_named_field_constructors();
        void test_parser_parses_function_constructors_for_unique_datatype();
        void test_parser_parses_named_field_constructors_for_unique_datatype();
        void test_parser_parses_variable_constructor();
        void test_parser_parses_variable_constructor_with_modifier();
        void test_parser_parses_function_constructor();
        void test_parser_parses_function_constructor_with_annotations_and_modifiers();
        void test_parser_parses_named_field_constructor();
        void test_parser_parses_named_field_constructor_with_annotations_and_modifiers();
        void test_parser_parses_binary_operator_constructor();
        void test_parser_parses_binary_operator_constructor_with_annotations_and_modifiers();
        void test_parser_parses_with_type_expression();
        void test_parser_parses_with_type_expression_with_nested_type_expression();
        void test_parser_parses_function_types();
        void test_parser_parses_primitive_function_types();
        void test_parser_parses_unique_function_types();
        void test_parser_parses_type_variable_expression();
        void test_parser_parses_type_parameter_expression();
        void test_parser_parses_tuple_types();
        void test_parser_parses_unique_tuple_types();
        void test_parser_parses_type_applications();
        void test_parser_parses_type_expression_in_parenthesis();
        void test_parser_parses_semicolons();
        void test_parser_parses_semicolons_in_module_definition();
        void test_parser_parses_semicolons_in_let_expression();
        void test_parser_parses_semicolons_in_match_expression();
        void test_parser_complains_on_syntax_error();
        void test_parser_complains_on_unclosed_comment();
        void test_parser_complains_on_empty_character_literal();
        void test_parser_complains_on_unclosed_character_literal();
        void test_parser_complains_on_unclosed_character_literal_for_end_of_file();
        void test_parser_complains_on_unclosed_character_literal_for_too_many_characters();
        void test_parser_complains_on_empty_wide_character_literal();
        void test_parser_complains_on_unclosed_wide_character_literal();
        void test_parser_complains_on_unclosed_wide_character_literal_for_end_of_file();
        void test_parser_complains_on_unclosed_wide_character_literal_for_too_many_characters();
        void test_parser_complains_on_integer_number_too_large_for_decimal_system();
        void test_parser_complains_on_integer_number_too_large_for_hexdecimal_system();
        void test_parser_complains_on_integer_number_too_large_for_octal_system();
        void test_parser_complains_on_floating_point_number_too_large();
        void test_parser_complains_on_unclosed_string_literal();
        void test_parser_complains_on_unclosed_string_literal_for_end_of_file();
        void test_parser_complains_on_unclosed_wide_string_literal();
        void test_parser_complains_on_unclosed_wide_string_literal_for_end_of_file();
        void test_parser_complains_on_incorrect_character();
        void test_parser_complains_on_incorrect_built_in_function();
      };
    }
  }
}

#endif
